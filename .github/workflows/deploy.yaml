name: Deploy to AWS Elastic Beanstalk

on:
  workflow_dispatch:
    inputs:
      aws-env:
        description: 'AWS Elastic Beanstalk environment'
        required: true
        default: 'feature-flags-demo-dev'
        type: string
      github-env:
        description: 'GitHub environment'
        required: true
        default: 'dev'
        type: string
      report-pr:
        description: 'PR number to report deployment status'
        required: false
        type: number
  workflow_call:
    inputs:
      aws-env:
        description: 'AWS Elastic Beanstalk environment'
        required: true
        default: 'feature-flags-demo-dev'
        type: string
      github-env:
        description: 'GitHub environment'
        required: true
        default: 'dev'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.aws-env }}-${{ inputs.github-env }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
    environment:
      name: ${{ github.event.inputs.github-env }}
      url: 'http://${{ steps.get-eb-env-cname.outputs.aws_env_cname }}'
    steps:
      - name: Prevent deployment to Production from different environments
        if: ${{  github.event.inputs.aws-env == vars.AWS_EB_PROD_ENV && github.event.inputs.github-env != 'prod' }}
        run: |
          echo "::error::Cannot deploy to Production from a non production environment"
          exit 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::856397720261:role/feature-flag-demo-gh-action
          aws-region: ${{ vars.AWS_REGION }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        env:
          NEXT_PUBLIC_FLAGSMITH_CLIENT_KEY: ${{ secrets.FLAGSMITH_CLIENT_KEY }}
        run: npm run build

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip

      - name: Install Elastic Beanstalk CLI
        id: install-eb-cli
        run: pip install awsebcli

      - name: Get AWS Elastic Beanstalk environment name
        id: get-eb-env-name
        run: echo "aws_env=$(aws elasticbeanstalk describe-environments --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --query "Environments[0].EnvironmentName" --output text)" >> $GITHUB_OUTPUT

      - name: Get AWS Elastic Beanstalk environment status
        id: get-eb-env-status
        run: echo "aws_env_status=$(aws elasticbeanstalk describe-environments --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --query "Environments[0].Status" --output text)" >> $GITHUB_OUTPUT

      - name: Initialize AWS Elastic Beanstalk
        run: eb init ${{ vars.AWS_EB_APP_NAME }} --platform "${{ vars.AWS_EB_PLATFORM }}" --region ${{ vars.AWS_REGION }}

      - name: Create AWS Elastic Beanstalk environment
        if: steps.get-eb-env-name.outputs.aws_env == 'None' || steps.get-eb-env-status.outputs.aws_env_status == 'Terminated'
        run: eb create ${{ github.event.inputs.aws-env }} --instance-types ${{ vars.AWS_EB_ENV_INSTANCE_TYPES }} --cname ${{ github.event.inputs.aws-env }} --envvars  NEXT_PUBLIC_FLAGSMITH_CLIENT_KEY=${{ secrets.FLAGSMITH_CLIENT_KEY }}

      - name: Deploy to AWS Elastic Beanstalk existing environment
        if: steps.get-eb-env-name.outputs.aws_env == github.event.inputs.aws-env && steps.get-eb-env-status.outputs.aws_env_status != 'Terminated'
        run: eb deploy ${{ steps.get-eb-env-name.outputs.aws_env }}

      - name: Get AWS Elastic Beanstalk environment cname
        id: get-eb-env-cname
        run: echo "aws_env_cname=$(aws elasticbeanstalk describe-environments --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ github.event.inputs.aws-env }} --query "Environments[0].CNAME" --output text)" >> $GITHUB_OUTPUT

      - name: Abort deployment if Cancelled
        if: ${{ cancelled() && steps.install-eb-cli.conclusion == 'success' }}
        run: |
          eb abort ${{ github.event.inputs.aws-env }}
          echo "::error::Deployment was cancelled"
          exit 1
